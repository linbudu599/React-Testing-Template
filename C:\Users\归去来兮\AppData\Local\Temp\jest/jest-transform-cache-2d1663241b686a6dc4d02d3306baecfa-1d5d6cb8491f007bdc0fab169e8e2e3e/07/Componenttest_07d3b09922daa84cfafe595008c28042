14b5f165ab8676fb0c6cf12956c7fef5
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var enzyme_1 = __importStar(require("enzyme"));
var enzyme_adapter_react_16_1 = __importDefault(require("enzyme-adapter-react-16"));
var Component_1 = __importStar(require("./Component"));
enzyme_1.default.configure({ adapter: new enzyme_adapter_react_16_1.default() });
describe('Common Component Test', function () {
    var commonFuncMock = jest.fn(Component_1.commonFunc);
    var asyncFuncMock = jest.fn(Component_1.asyncFunc);
    var conditionalFuncMock = jest.fn(function () { return true; });
    asyncFuncMock.mockResolvedValue(7);
    var injectProps = {
        commonProp: 599,
        commonFunc: commonFuncMock,
        asyncFunc: asyncFuncMock,
        conditionalFunc: conditionalFuncMock,
    };
    it('should invoke function from props when rendering', function () {
        var wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        expect(commonFuncMock).toBeCalledWith('budu');
        expect(asyncFuncMock).toBeCalledWith('budu');
    });
    it('should use property from props', function () {
        var wrapper = enzyme_1.shallow(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        expect(wrapper.find('p.common-prop').text()).toBe(String(injectProps.commonProp));
    });
    it('should render common-func button and be able to invoke commonFunc ', function () {
        var wrapper = enzyme_1.shallow(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        var commonFuncBtn = wrapper.find('button.common-func');
        expect(commonFuncBtn.text()).toBe('Invoke Common Function');
        commonFuncBtn.simulate('click');
        expect(commonFuncMock).toBeCalledWith('linbudu');
        expect(commonFuncMock.mock.results[0].value).toBe(false);
    });
    it('should render async-func button and be able to invoke asyncFunc ', function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper, asyncFuncBtn;
        return __generator(this, function (_a) {
            expect.assertions(2);
            wrapper = enzyme_1.shallow(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
            asyncFuncBtn = wrapper.find('button.async-func');
            expect(asyncFuncBtn.text()).toBe('Invoke Async Function');
            asyncFuncBtn.simulate('click');
            expect(asyncFuncMock).toBeCalledWith('linbudu');
            return [2 /*return*/];
        });
    }); });
    it('should render inside-func button and be able to invoke insideFunc ', function () { return __awaiter(void 0, void 0, void 0, function () {
        var wrapper, insideFuncBtn, count;
        return __generator(this, function (_a) {
            wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
            insideFuncBtn = wrapper.find('button.inside-func');
            count = wrapper.find('p.count');
            expect(insideFuncBtn.text()).toBe('Invoke Inside Function');
            expect(count.text()).toBe('0');
            insideFuncBtn.simulate('click');
            expect(count.text()).toBe('1');
            insideFuncBtn.simulate('click');
            expect(count.text()).toBe('2');
            return [2 /*return*/];
        });
    }); });
    it('should render items correctly', function () {
        var wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        var infoElements = wrapper.find('p.info');
        expect(infoElements.length).toBe(3);
        for (var i = 0; i < infoElements.length; i++) {
            var infoItem = Object.values(Component_1.data[i]);
            expect(infoElements.at(i).text()).toBe(infoItem.join(','));
        }
    });
    it('should render conditional DOM only when conditionalFunc return true', function () {
        conditionalFuncMock.mockReturnValueOnce(true);
        var wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        expect(typeof wrapper.prop('conditionalFunc')).toBe('function');
        var conditionalEle = wrapper.find('p.conditional');
        expect(conditionalEle.text()).toBe('Conditional Function');
        // PUZZLE: 重新渲染wrapper会使得mockValueOnce重新计算
        conditionalFuncMock.mockReturnValue(false);
        var wrapperFalse = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        expect(wrapperFalse.exists('p.conditional')).toBeFalsy();
    });
    it('should fetch remote data and render to DOM', function () {
        var wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps)));
        // TODO: remoteData test details?
        var dataElement = wrapper.find('p.remote-data');
        // expect(dataElement.length).toBe(15);
        // expect()
    });
    it('should set props correctly', function () {
        var wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps, { propsToBeSet: 'INIT' })));
        var setPropsEle = wrapper.find('p.set-prop');
        expect(setPropsEle.text()).toBe('INIT');
        wrapper.setProps(__assign(__assign({}, injectProps), { propsToBeSet: 'MODIFIED' }));
        expect(setPropsEle.text()).toBe('MODIFIED');
    });
    it('should set method correctly', function () {
        var wrapper = enzyme_1.mount(react_1.default.createElement(Component_1.default, __assign({}, injectProps, { methodTobeSet: function () { return true; } })));
        var setMethodEle = wrapper.find('p.set-method');
        expect(setMethodEle.text()).toBe('INIT');
        wrapper.setProps({ methodTobeSet: function () { return false; } });
        expect(setMethodEle.text()).toBe('MODIFIED');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,