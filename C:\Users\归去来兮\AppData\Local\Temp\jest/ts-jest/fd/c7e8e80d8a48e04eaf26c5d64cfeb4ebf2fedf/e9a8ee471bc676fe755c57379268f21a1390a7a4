{"/usr/local/demo-collections/React-Testing-Template/Component.test.tsx":{"modulePaths":["/usr/local/demo-collections/React-Testing-Template/node_modules/@types/react/index.d.ts","/usr/local/demo-collections/React-Testing-Template/node_modules/@types/enzyme/index.d.ts","/usr/local/demo-collections/React-Testing-Template/node_modules/@types/enzyme-adapter-react-16/index.d.ts","/usr/local/demo-collections/React-Testing-Template/Component.tsx"],"testFileContent":"import React from \"react\";\nimport Enzyme, { render, shallow, mount } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport MyComponent, { commonFunc, asyncFunc, data } from \"./Component\";\n\nEnzyme.configure({ adapter: new Adapter() });\n\ndescribe(\"Common Component Test\", () => {\n  const commonFuncMock = jest.fn(commonFunc);\n  const asyncFuncMock = jest.fn(asyncFunc);\n\n  asyncFuncMock.mockResolvedValue(7);\n\n  const injectProps = {\n    commonProp: 599,\n    commonFunc: commonFuncMock,\n    asyncFunc: asyncFuncMock,\n  };\n\n  it(\"should invoke function from props when rendering\", () => {\n    const wrapper = shallow(<MyComponent {...injectProps} />);\n    expect(commonFuncMock).toBeCalledWith(\"budu\");\n    expect(asyncFuncMock).toBeCalledWith(\"budu\");\n  });\n\n  it(\"should use property from props\", () => {\n    const wrapper = shallow(<MyComponent {...injectProps} />);\n\n    expect(wrapper.find(\"p.common-prop\").text()).toBe(\n      String(injectProps.commonProp)\n    );\n  });\n\n  it(\"should render common-func button and be able to invoke commonFunc \", () => {\n    const wrapper = shallow(<MyComponent {...injectProps} />);\n    const commonFuncBtn = wrapper.find(\"button.common-func\");\n    expect(commonFuncBtn.text()).toBe(\"Invoke Common Function\");\n    commonFuncBtn.simulate(\"click\");\n    expect(commonFuncMock).toBeCalledWith(\"linbudu\");\n    expect(commonFuncMock.mock.results[0].value).toBe(false);\n  });\n\n  it(\"should render async-func button and be able to invoke asyncFunc \", async () => {\n    expect.assertions(2);\n    const wrapper = shallow(<MyComponent {...injectProps} />);\n    const asyncFuncBtn = wrapper.find(\"button.async-func\");\n    expect(asyncFuncBtn.text()).toBe(\"Invoke Async Function\");\n    asyncFuncBtn.simulate(\"click\");\n    expect(asyncFuncMock).toBeCalledWith(\"linbudu\");\n    // TODO: deal with outside async method\n    // expect(asyncFuncMock.mock.results[0].value).toBe(7);\n  });\n\n  it(\"should render inside-func button and be able to invoke insideFunc \", async () => {\n    const wrapper = mount(<MyComponent {...injectProps} />);\n    const insideFuncBtn = wrapper.find(\"button.inside-func\");\n    const count = wrapper.find(\"p.count\");\n    expect(insideFuncBtn.text()).toBe(\"Invoke Inside Function\");\n    expect(count.text()).toBe(\"0\");\n    insideFuncBtn.simulate(\"click\");\n    expect(count.text()).toBe(\"1\");\n  });\n\n  it(\"should render items correctly\", () => {\n    const wrapper = mount(<MyComponent {...injectProps} />);\n    const infoElements = wrapper.find(\"p.info\");\n    expect(infoElements.length).toBe(3);\n    for (let i = 0; i < infoElements.length; i++) {\n      const infoItem = Object.values(data[i]);\n      expect(infoElements.at(i).text()).toBe(infoItem.join(\",\"));\n    }\n  });\n});\n"}}